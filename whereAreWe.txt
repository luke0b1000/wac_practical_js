VERSION 1 - Arrays
    -Requirements
        -It should have a place to store todos
        -It should have a way to display todos
        -It should have a way to add new todos
        -It should have a way to change a todo
        -It should have a way to delete a todo
        -Review
    -It should have a place to store todos
        var todos = ['item 1', 'item 2', 'item 3'];  //Array
    -It should have a way to display todos
        console.log('hello there', 'gordon');
        var todos = ['item 1', 'item 2', 'item 3'];
        console.log('My todos: ', todos);
    -It should have a way to add new todos
        todos.push('item 5'); // add new item to the end of the array
    -It should have a way to change a todo
        todos[0] = 'item 1 updated';
    -It should have a way to delete a todo
        // todos.splice(position, how many items to delete); // returns the items that are deleted.
        todos.splice(0,1); // started the deletion at the first [0] item and deleted only 1 item.
    -Review
VERSION 2 - Functions
    -Functions are just recipes
        function makeTurkeySandwich() {
            Get once slice of bread;
            Add turkey;
            Put a slice of bread on top;
        }
        makeTurkeySandwich();
    -Customizing Functions
        function makeSandwichWith(filling) {    // makeSandwichWith(parameters)
            Get once slice of bread;
            Add filling;
            Put a slice of bread on top;
        }
        makeSandwichWith(ham);                  // makeSandwichWith(arguements);
    -More on customizing functiions
        function sayHiTo(person) {
            console.log('hi', person);
        }
        sayHiTo('gordon');
    -Requirements
        -It should have a function to display todos
        -It should have a function to add new todos
        -It should have a function to change a todo
        -It should have a function to delete a todo
    -It should have a function to display todos
        var todos = ['item 1', 'item 2', 'item 3'];
        function displayTodos() {
            console.log('My todos: ', todos);
        }
        displayTodos();
    -It should have a function to add new todos
        function addTodos(todo) {
            todos.push(todo);
            displayTodos();
        }
        addTodos('new item');
    -It should have a function to change a todo
        function changeTodo(position, newValue) {
            todos[position] = newValue;
            displayTodos();
        }
        changeTodo(0, 'changed again');
    -It should have a function to delete a todo
        function deleteTodo(positon) {
            todos.splice(position, 1);
            displayTodos();
        }
        deleteTodo(2);
    -Review
Interlude - Functions and variables
    -Observations
        // If you're inside of a function, you can look out and see data, but the opposite isn't true. If you're outside, you can't look in.
    -Circles and arrows
    -Applying what we've learned
Version 3 - Objects
    -What is an object
        var myComputer = {
            operatingSystem: 'mac',   // operatingSystem is a property, value is mac
            screenSize: '15 inches',
            purchaseYear: 2011,
        }
        myComputer                  // all the Objects are displayed
        myComputer.operatingSystem  // 'mac'
        myComputer.purchaseYear     // 2011
    -Objects and Functions
        var gordon = {                      // this refers to the whole object starting from { to the end }
            name: 'Gordon',
            sayName: function() {           // sayName is a method
                console.log(this.name);
            }
        }
        gordon.sayName();
    -Using Plunker
    -Requirements
        -It should store the todos array on an object
        -It should have a displayTodos method
        -It should have an addTodo method
        -It should have a changeTodo method
        -It should have a deleteTodo method
    -It should store the todos array on an object
        var todoList = {
            todos : ['item 1', 'item 2', 'item 3'],
        };
        todoList
    -It should have a displayTodos method
        displayTodos: function() {
            console.log('My Todos:', this.todos);
        },
    -It should have an addTodo method
        addTodo: function(todo) {
            this.todos.push(todo);
            this.displayTodos();
        },
        todoList.addTodo('plunker');
    -It should have a changeTodo method
        changeTodo: function(position, newValue) {
            this.todos[position] = newValue;
            this.displayTodos();
        }
        todoList.changeTodo(0, 'first');
    -It should have a deleteTodo method
        deleteTodo: function(position) {
            this.todos.splice(position, 1);
            this.displayTodos();
        }
        todoList.deleteTodo(1);
    -Review
Interlude - Success is the process
    -Ability = Process * Time
    -The most important part of your process
Version 4 - Booleans
    -Requirements
        -todoList.addTodo should add objects
        -todoList.changeTodo should change the todoText property
        -todoList.toggleCompleted should flip the completed property
    -todoList.addTodo should add objects
        this.todos.push({
            todoText: todoText,
            completed: false,
        });
        todoList.addTodo('this is an object');
    -todoList.changeTodo should change the todoText property
        todoList.changeTodo(0, 'second try');
    -todoList.toggleCompleted should flip the completed property
        todoList.toggleCompleted(0);    // toggle between true or false
    -Review
Version 5 - Loops of Logic
    -The for loop
        for (initialization, condition, final-expression) {
            console.log('hey');
        }

        for (var i = 0, i < 3, i = i + 1) {
            console.log('hey');
        }
    -Looping over arrays
        var testArray = ['item 1', 'item 2', 'item 3'];
        for (var i = 0, i < testArray.length, i = i + 1) {
            console.log(testArray[i]);
        }
    -Requirements
        -displayTodos should show .todoText
        -displayTodos should tell you if .todos is empty
        -displayTodos should show .completed
    -displayTodos should show .todoText
        todoList.displayTodos();
    -displayTodos should tell you if .todos is empty
    -displayTodos should show .completed
        todoList.toggleCompleted(2);
        todoList.displayTodos();
    -Review
Version 6 - Thinking in Code
    -Requirements
        -.toggleAll: If everything's true, make everything false
        -.toggleAll: Otherwise, make everything true
    -.toggleAll: If everything's true, make everything false
        todoList.toggleAll();
    -.toggleAll: Otherwise, make everything true
    -Review
Interlude - Data types and comparisons
    -Data types overview
        Objects {} // todoList, arrays, Functions
        Primitives (building blocks) // String, Number, Boolean, Undefined, Null
    -Comparisons with primitives
        undefined === undefined //true
        Null === Null // true
    -Comparisons with objects
        {} === {} // false  // two different objects
        [1,2,3] === [1,2,3] // false
        Comparisons with objects are comparing with computer memory address/location
        var houseA = {};
        houseA === houseA;  // true
        houseB = houseA;    // setting houseB to the same memory location as houseA
        houseA === houseB;  // true
    -Comparisons review
        Primitives compares values
        Objects compare references (memory addresses)
    -How are primitives and objects stored inside of variables?